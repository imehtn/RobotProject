#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHSD.h>
#include <FEHRCS.h>

// define pi
#define pi 3.14159

// Declare Motors and Encoders
DigitalEncoder left_encoder(FEHIO::P1_1);
DigitalEncoder right_encoder(FEHIO::P1_0);
FEHMotor left_motor(FEHMotor::Motor0, 9.0);
FEHMotor right_motor(FEHMotor::Motor1, 9.0);


// Function for moving forward
void move_forward(int percent, int counts)
{
    // Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    // Set both motors to desired percent
    left_motor.SetPercent(percent);
    right_motor.SetPercent(percent);
    // Run motors while the average of left and right encoder is less than
    // counts
    while (((left_encoder.Counts() + right_encoder.Counts()) / 2) < counts);

    // Turn off motors
    left_motor.Stop();
    right_motor.Stop();
}

// Function for turning left
void turn_left(int percent, int counts)
{
    // Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    // Set both motors to desired percentage
    right_motor.SetPercent(percent);
    left_motor.SetPercent(-percent);
    // Run motors for time
    while (((left_encoder.Counts() + right_encoder.Counts()) / 2) < counts*6);
    
    // turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

// Function for turning right

void turn_right(int percent, int counts)
{
    // Reset encoder counts
    left_encoder.ResetCounts();
    right_encoder.ResetCounts();

    // Set both motors to desired percentage
    right_motor.SetPercent(-percent);
    left_motor.SetPercent(percent);
    
    // Run motors for time
    while (((left_encoder.Counts() + right_encoder.Counts()) / 2) < counts*6);

    // turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

enum LineStates
{
    MIDDLE,
    RIGHT,
    LEFT
};

int main(void)
{
    AnalogInputPin sensorLeft(FEHIO::P1_0);
    AnalogInputPin sensorCenter(FEHIO::P1_1);
    AnalogInputPin sensorRight(FEHIO::P1_2);

    // Before beginning
    /*
    FEHFile *ofptr = SD.FOpen("Output.txt", "w");

    LCD.WriteLine("hello");
    while(true)
    {
        float value1 = sensorRight.Value(), value2 = sensorCenter.Value(),value3 = sensorLeft.Value();
        SD.FPrintf(ofptr, "Sensor 1 value: %f", value1);
        SD.FPrintf(ofptr, "Sensor 2 value: %f", value2);
        SD.FPrintf(ofptr, "Sensor 3 value: %f", value3);

        if (TimeNow()>20)
        {
            break;
        }
    }
    SD.FClose(ofptr);

    LCD.WriteLine("bye");*/

    
    //Part 1
    /*
    int state = MIDDLE; // Set the initial state
    while (true)
    { // I will follow this line forever!
        switch (state)
        {
        // If I am in the middle of the line...
        case MIDDLE:
            left_motor.SetPercent(25);
            right_motor.SetPercent(25);

            if (sensorRight.Value() >2.5)
            {
                state = RIGHT; // update a new state
            }
            if (sensorLeft.Value() > 2.1)
            {
                state = LEFT; // update a new state
            }
            break;

        // If the right sensor is on the line...
        case RIGHT:
            right_motor.SetPercent(25);
            left_motor.SetPercent(-25);
            // Drive
            Sleep(0.1);
            if (sensorCenter.Value()>2.6)
            {
                state = MIDDLE;
            }
            if (sensorLeft.Value() > 2.1)
            {
                state = LEFT; // update a new state
            }
            break;
        // If the left sensor is on the line...
        case LEFT:
            right_motor.SetPercent(-25);
            left_motor.SetPercent(25);
            // Drive
            Sleep(0.1);
            if (sensorCenter.Value()>2.6)
            {
                state = MIDDLE;
            }
            //added
            if (sensorRight.Value() >2.5)
            {
                state = RIGHT; // update a new state
            }

            break;

        default: // Error. Something is very wrong.
            break;
        }
    }*/

    
    int motor_percent = 40; //Input power level here
    int expected_counts = (318/(2*pi*1.25)); //Input theoretical counts here
    
    /* 
    //Part 2
    float x, y; //for touch screen
    
    //Initialize the screen
    LCD.Clear(BLACK);
    LCD.SetFontColor(WHITE);

    LCD.WriteLine("Shaft Encoder Exploration Test");
    LCD.WriteLine("Touch the screen");
    while(!LCD.Touch(&x,&y)); //Wait for screen to be pressed
    while(LCD.Touch(&x,&y)); //Wait for screen to be unpressed

    move_forward(motor_percent, expected_counts); //see function

    Sleep(2.0); //Wait for counts to stabilize
    //Print out data
    LCD.Write("Theoretical Counts: ");
    LCD.WriteLine(expected_counts);
    LCD.Write("Motor Percent: ");
    LCD.WriteLine(motor_percent);
    LCD.Write("Actual LE Counts: ");
    LCD.WriteLine(left_encoder.Counts());
    LCD.Write("Actual RE Counts: ");
    LCD.WriteLine(right_encoder.Counts());*/
    
    //final check
    move_forward(motor_percent, expected_counts*14); 
    turn_left(motor_percent, expected_counts);
    move_forward(motor_percent, expected_counts*10); 
    turn_right(motor_percent, expected_counts);
    move_forward(motor_percent, expected_counts*4); 

    return 0;
}
